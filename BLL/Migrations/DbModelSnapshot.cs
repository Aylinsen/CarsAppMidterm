// <auto-generated />
using System;
using BLL.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BLL.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BLL.DAL.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDamaged")
                        .HasColumnType("bit");

                    b.Property<int?>("TypeCarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("modelYear")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TypeCarId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("BLL.DAL.CarOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("Ownerid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("Ownerid");

                    b.ToTable("CarOwners");
                });

            modelBuilder.Entity("BLL.DAL.Owner", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("surName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("BLL.DAL.TypeCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TypeCarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeCarId");

                    b.ToTable("TypeCars");
                });

            modelBuilder.Entity("BLL.DAL.Car", b =>
                {
                    b.HasOne("BLL.DAL.TypeCar", "TypeCar")
                        .WithMany()
                        .HasForeignKey("TypeCarId");

                    b.Navigation("TypeCar");
                });

            modelBuilder.Entity("BLL.DAL.CarOwner", b =>
                {
                    b.HasOne("BLL.DAL.Car", "Car")
                        .WithMany("CarOwners")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLL.DAL.Owner", "Owner")
                        .WithMany("CarOwners")
                        .HasForeignKey("Ownerid");

                    b.Navigation("Car");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BLL.DAL.TypeCar", b =>
                {
                    b.HasOne("BLL.DAL.TypeCar", null)
                        .WithMany("Cars")
                        .HasForeignKey("TypeCarId");
                });

            modelBuilder.Entity("BLL.DAL.Car", b =>
                {
                    b.Navigation("CarOwners");
                });

            modelBuilder.Entity("BLL.DAL.Owner", b =>
                {
                    b.Navigation("CarOwners");
                });

            modelBuilder.Entity("BLL.DAL.TypeCar", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
